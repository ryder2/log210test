require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FamillesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Famille. As you add validations to Famille, be sure to
  # adjust the attributes here as well.
  before { controller.stub(:authenticate_user!).and_return true }
  
  let(:valid_attributes) {
    {nom: "MyNom", dossier_id: "MyDossier", statut: "MyStatut"}
  }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FamillesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all familles as @familles" do
      famille = Famille.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:familles)).to eq([famille])
    end
  end

  describe "GET #show" do
    it "assigns the requested famille as @famille" do
      famille = Famille.create! valid_attributes
      get 'show', :id => famille.id
      expect(assigns(:famille)).to eq(famille)
    end
  end

  describe "GET #new" do
    it "assigns a new famille as @famille" do
      get :new, params: {famille: valid_attributes}, session: valid_session
      expect(assigns(:famille)).to be_a_new(Famille)
    end
  end

  describe "GET #rechercher" do
    it "assigns a rechercher" do
      post 'rechercher', :typeDeRecherche => "1", :valeurDeRecherche => "1", :format => :json
    end
    it "assigns a rechercher" do
      post 'rechercher', :typeDeRecherche => "2", :valeurDeRecherche => "hello", :format => :json
    end
    it "assigns a rechercher" do
      post 'rechercher', :typeDeRecherche => "4", :valeurDeRecherche => "hello", :format => :json
    end
  end

  describe "GET #edit" do
    it "assigns the requested famille as @famille" do
      famille = Famille.create! valid_attributes
      get 'edit', :id => famille.id
      expect(assigns(:famille)).to eq(famille)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Famille" do
        expect {
          post 'create', :famille => valid_attributes
        }.to change(Famille, :count).by(1)
      end

      it "assigns a newly created famille as @famille" do
        post 'create', :famille => valid_attributes
        expect(assigns(:famille)).to be_a(Famille)
        expect(assigns(:famille)).to be_persisted
      end

      it "redirects to the created famille" do
        post 'create', :famille => valid_attributes
        expect(response).to redirect_to(Famille.last)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {nom: "MyNom2", dossier_id: "MyDossier2", statut: "MyStatut2"}
      }

      it "updates the requested famille" do
        famille = Famille.create! valid_attributes
        put 'update', {:id => famille.id, :famille => new_attributes}
        famille.reload
		expect(famille.nom).not_to eq("MyNom")
      end

      it "assigns the requested famille as @famille" do
        famille = Famille.create! valid_attributes
        put 'update', {:id => famille.id, :famille => valid_attributes}
        expect(assigns(:famille)).to eq(famille)
      end

      it "redirects to the famille" do
        famille = Famille.create! valid_attributes
        put 'update', {:id => famille.id, :famille => valid_attributes}
        expect(response).to redirect_to(famille)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested famille" do
      famille = Famille.create! valid_attributes
      expect {
        delete 'destroy', :id => famille.id
      }.to change(Famille, :count).by(-1)
    end

    it "redirects to the familles list" do
      famille = Famille.create! valid_attributes
      delete 'destroy', :id => famille.id
      expect(response).to redirect_to(familles_url)
    end
  end

end
