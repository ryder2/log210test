require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe VsDemandesController, type: :controller do
  before { controller.stub(:authenticate_user!).and_return true }

  # This should return the minimal set of attributes required to create a valid
  # VsDemande. As you add validations to VsDemande, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {motif_pv: "visiteur", motivations_pv: "nom2", interdit_contact_pv: true, date_separation_pv: "2001-01-01", 
      contact_enfant_pv: true, contact_telephone_enfant_pv: true, attitude_parent_pv: "avocat2", 
      demande_id: 1, motif_pg: "102", date_separation_pg: "2012-01-01", dernier_contact_deroulement_pg: "100ABC2", 
      date_dernier_contact_pg: "2012-01-01", contact_telephone_enfant_pg: true, autorisation_accompagnement_pg: true, 
      personnes_autorisees_pg: "true", attitude_parent_pg: "true", jeux_favoris_pg: "avocat2", 
      gout_alimentaire_pg: "1", enfant_sait_visite_pg: true, reaction_visite_pg: "2012-01-01", attitude_enfant_pg: "100ABC2", 
      autre_pg: "2012-01-01"}
  }

  let(:invalid_attributes) {
    {motif_pv: "", motivations_pv: "nom2", interdit_contact_pv: true, date_separation_pv: "2001-01-01", 
      contact_enfant_pv: true, contact_telephone_enfant_pv: true, attitude_parent_pv: "avocat2", 
      demande_id: 1, motif_pg: "102", date_separation_pg: "2012-01-01", dernier_contact_deroulement_pg: "100ABC2", 
      date_dernier_contact_pg: "2012-01-01", contact_telephone_enfant_pg: true, autorisation_accompagnement_pg: true, 
      personnes_autorisees_pg: "true", attitude_parent_pg: "true", jeux_favoris_pg: "avocat2", 
      gout_alimentaire_pg: "1", enfant_sait_visite_pg: true, reaction_visite_pg: "2012-01-01", attitude_enfant_pg: "100ABC2", 
      autre_pg: "2012-01-01"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VsDemandesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all vs_demandes as @vs_demandes" do
      vs_demande = VsDemande.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:vs_demandes)).to eq([vs_demande])
    end
  end

  describe "GET #show" do
    it "assigns the requested vs_demande as @vs_demande" do
      vs_demande = VsDemande.create! valid_attributes
      get 'show', :id => vs_demande.id
      expect(assigns(:vs_demande)).to eq(vs_demande)
    end
  end

  describe "GET #new" do
    it "assigns a new vs_demande as @vs_demande" do
      get :new, params: {}, session: valid_session
      expect(assigns(:vs_demande)).to be_a_new(VsDemande)
    end
    it "assigns a new vs_demande with a param" do
      get :new, :demande_id => 1
      expect(assigns(:vs_demande)).to be_a_new(VsDemande)
    end
  end

  describe "GET #edit" do
    it "assigns the requested vs_demande as @vs_demande" do
      vs_demande = VsDemande.create! valid_attributes
      get 'edit', :id => vs_demande.id
      expect(assigns(:vs_demande)).to eq(vs_demande)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new VsDemande" do
        expect {
          post 'create', :vs_demande => valid_attributes
        }.to change(VsDemande, :count).by(1)
      end

      it "assigns a newly created vs_demande as @vs_demande" do
        post 'create', :vs_demande => valid_attributes
        expect(assigns(:vs_demande)).to be_a(VsDemande)
        expect(assigns(:vs_demande)).to be_persisted
      end

      it "redirects to the created vs_demande" do
        post 'create', :vs_demande => valid_attributes
        expect(response).to redirect_to(VsDemande.last)
      end
    end
    context "with invalid attributes" do
      it "does not save the new contact" do
        expect{
          post 'create', :vs_demande => invalid_attributes
        }.to_not change(VsDemande,:count)
      end

      it "re-renders the new method" do
        post 'create', :vs_demande => invalid_attributes
        response.should render_template :new
      end
    end 
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {motif_pv: "visiteur", motivations_pv: "nom6", interdit_contact_pv: true, date_separation_pv: "2001-01-01", 
      contact_enfant_pv: true, contact_telephone_enfant_pv: true, attitude_parent_pv: "avocat2", 
      demande_id: 1, motif_pg: "102", date_separation_pg: "2012-01-01", dernier_contact_deroulement_pg: "100ABC2", 
      date_dernier_contact_pg: "2012-01-01", contact_telephone_enfant_pg: true, autorisation_accompagnement_pg: true, 
      personnes_autorisees_pg: "true", attitude_parent_pg: "true", jeux_favoris_pg: "avocat2", 
      gout_alimentaire_pg: "1", enfant_sait_visite_pg: true, reaction_visite_pg: "2012-01-01", attitude_enfant_pg: "100ABC2", 
      autre_pg: "2012-01-01"}
      }

      it "updates the requested vs_demande" do
        vs_demande = VsDemande.create! valid_attributes
        put 'update', {:id => vs_demande.id, :vs_demande => new_attributes}
        vs_demande.reload
        expect(vs_demande.motivations_pv).not_to eq("nom2")
      end

      it "assigns the requested vs_demande as @vs_demande" do
        vs_demande = VsDemande.create! valid_attributes
        put 'update', {:id => vs_demande.id, :vs_demande => valid_attributes}
        expect(assigns(:vs_demande)).to eq(vs_demande)
      end

      it "redirects to the vs_demande" do
        vs_demande = VsDemande.create! valid_attributes
        put 'update', {:id => vs_demande.id, :vs_demande => valid_attributes}
        expect(response).to redirect_to(vs_demande)
      end
    end
    context "with invalid attributes" do
      it "re-renders the update method" do
        vs_demande = VsDemande.create! valid_attributes
        put 'update', {:id => vs_demande.id, :vs_demande => invalid_attributes}
        response.should render_template :edit
      end
    end 
  end

  describe "DELETE #destroy" do
    it "destroys the requested vs_demande" do
      vs_demande = VsDemande.create! valid_attributes
      expect {
        delete 'destroy', :id => vs_demande.id
      }.to change(VsDemande, :count).by(-1)
    end

    it "redirects to the vs_demandes list" do
      vs_demande = VsDemande.create! valid_attributes
      delete 'destroy', :id => vs_demande.id
      expect(response).to redirect_to(vs_demandes_url)
    end
  end

end
